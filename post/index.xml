<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 阿兵云原生</title>
    <link>https://qingconglaixueit.github.io/post/</link>
    <description>Recent content in Posts on 阿兵云原生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Apr 2023 11:02:59 +0800</lastBuildDate><atom:link href="https://qingconglaixueit.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://qingconglaixueit.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://qingconglaixueit.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become</description>
    </item>
    
    <item>
      <title>我们要不要使用 ORM？</title>
      <link>https://qingconglaixueit.github.io/post/orm/</link>
      <pubDate>Thu, 27 Apr 2023 11:02:59 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/orm/</guid>
      <description>本次主要来聊聊关于 ORM 的内容，欢迎评论交流，欢迎批评指正
分别从如下 4 个方面来展开
 ORM 他是个啥？   为什么要用 ORM？   ORM 给我们带来了哪些问题？   如何去考虑是否要使用 ORM？  ORM 他是个啥？ 一提到 ORM 很多同学知道他是跟数据库相关的一个内容，但是并不清楚他到底是这个啥，自己需不需要，到底怎么玩？
实际上 ORM 就那么一回事，从这三个字母就可以看到
O：Object
R：Relational
M：Mapping
对象关系映射，即关系型数据库和我们的实体业务对象来进行一个映射，对与我们使用 ORM 对象来说，就直接去使用其对应的各种方法即达到自动持久化的目的，无需关注具体的 sql 细节
因为 ORM 已经为你隐藏了关于 sql 的部分，让不熟悉 sql 的 xdm 也可以很好的上手
只要你知道如何使用函数，使用对象里面的方法到底你的数据操作目的即可
为什么要用 ORM？ 为什么要使用 ORM 呢？难道出了一个新的东西，我们就一定要用吗？自然是要知道他的好，我们才会去使用</description>
    </item>
    
    <item>
      <title>Go 语言中 panic 和 recover 搭配使用</title>
      <link>https://qingconglaixueit.github.io/post/panic_revovery/</link>
      <pubDate>Thu, 27 Apr 2023 10:52:54 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/panic_revovery/</guid>
      <description>本次主要聊聊 Go 语言中关于 panic 和 recover 搭配使用 ，以及 panic 的基本原理
最近工作中审查代码的时候发现一段代码，类似于如下这样，将 recover 放到一个子协程里面，期望去捕获主协程的程序异常
看到此处，是否会想这段代码在项目中是想当然写出来的吧，然而平日中，大多问题是出现在认知偏差上，那么本次，我们就来消除一下这个认知偏差
关于 Go 语言中显示的使用 panic 的地方不多，一般 panic ，基本上会出现在咱们程序出现异常退出的时候
例如访问了空指针里面的值，则会 panic 报错无效的内存地址，又例如访问量数组中不存在的数组所索引，或者切片索引，那么会报错 panic 数组越界等等
可是碰到这些 panic 的时候，实际上我们并不期望当前的服务直接挂掉，而是期望这个异常能够被识别，且不影响程序其他部分的模块运行
正常捕获异常 在 Go 中可以将 defer 和 recover 进行搭配使用，可以捕获和处理大部分的异常情况，例如可以这样
这里可以看到，recover 捕获异常和发生异常的部分是在同一个协程中，实验证明是可以正常捕获并且处理异常
并没有捕获到异常  直接不做显示的 recover，自然 panic 程序崩溃会如期而至，此处我们显示的使用 panic 函数来制造恐慌  func main() { log.</description>
    </item>
    
    <item>
      <title>Go 语言中的反射</title>
      <link>https://qingconglaixueit.github.io/post/fanshe/</link>
      <pubDate>Thu, 27 Apr 2023 10:48:12 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/fanshe/</guid>
      <description>今天主要来聊聊 Go 语言中反射，希望对你有新的认知
虽然很多人使用 Go 语言有一定时间了，甚至有的使用了 1 年 2 年，然后对于 Go 语言中的反射还是模棱两可，使用起来的时候，心里也不是非常有底气
更有甚者，几乎不使用反射，当然，也不是什么错，在工作中能用最简单最高效，又可扩展，性能还好的方式来进行处理自然是最 nice ，没有必要去生搬硬套一些高级用法，毕竟工作不是我们的试炼场，可以自己下来多多实验，本次就来好好看看如何去玩反射
文章分别从如下五个方面来聊
 反射是什么   反射的规则   使用案例并灵活运用   反射原理   总结  简单来看反射是什么 简单来看，反射就是在程序运行时期对程序本身进行访问和修改的能力，例如在程序运行时，可以修改程序的字段名称，字段值，还可以给程序提供接口访问的信息等等
这是 Go 语言中提供的一种机制，我们可以在 Go 语言公共库中可以看到很多关于 reflect 的使用位置
例如常用的 fmt 包，常用的 json 序列化和反序列化，自然前面我们说到的 gorm 库自然也是使用了反射的
可是我们一般为什么要使用反射呢？
根据反射的能力，自然是因为我们提供的接口并不知道传入的数据类型会是什么样的， 只有当程序运行的时候才知道具体的数据类型</description>
    </item>
    
    <item>
      <title>Go 语言切片扩容规则是扩容2倍？1.25倍？到底几倍</title>
      <link>https://qingconglaixueit.github.io/post/qiepiankuorong/</link>
      <pubDate>Thu, 27 Apr 2023 10:45:02 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/qiepiankuorong/</guid>
      <description>本次主要来聊聊关于切片的扩容是如何扩的，还请大佬们不吝赐教
切片，相信大家用了 Go 语言那么久这这种数据类型并不陌生，但是平日里聊到关于切片是如何扩容的，很多人可能会张口就来，切片扩容的时候，如果老切片的容量小于 1024 那么就再扩容 1倍，也就是新的切片容量是老切片容量的两倍，同理，如果老切片容量大于 1024，那么就扩容1.25 倍
一个人这么说，多个人这么说，你可能就信了😂😂，可是大家都这么认为，我们就应该盲从吗？还是要自己去确认真实的扩容逻辑和实现方式，那就开始吧😁
结论先行，切片对于扩容并不一定是 2 倍，1.25倍，这个要看实际情况
本文分别从如下几点来聊聊切片的扩容
 扩容是针对切片的，数组无法扩容   切片扩容到底是扩容到原来的几倍？   我们一般使用切片的时候可以如何避免频繁的扩容？  扩容是针对切片的，数组无法扩容 首先需要明确，数组是不能扩容的，数组定义的时候就已经是定长的了，无法扩容
切片是可以扩容的，我们可以通过 append 追加的方式来向已有的切片尾部进行追加，若原有切片已满，那么就会发生扩容
另外，我们知道数组是一段连续的内存地址，同一种数据类型的数据集合，例如这样
func main() { log.SetFlags(log.Lshortfile) var demoArray = [5]int{1, 2, 3, 4, 5} log.Print(&amp;quot;unsafe.sizeof(int) == &amp;quot;,unsafe.Sizeof(demoArray[0])) for i, _ := range demoArray { log.</description>
    </item>
    
    <item>
      <title>团队变动，裁员 ，拿股权，年底降薪，微信接入 ChatGPT 我都经历了，仍然要往云原生方向进发！！</title>
      <link>https://qingconglaixueit.github.io/post/tuanduibiandong/</link>
      <pubDate>Wed, 26 Apr 2023 17:50:02 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/tuanduibiandong/</guid>
      <description>年底，又是一个总结过去和展望未来的时刻，在病痛交加的周六，捂着被子，拿着手机回顾我这时而平凡时而精彩的 2022，回望本年，又是没有财务自由的一年，团队变动，裁员，年底降薪，拿股权，健身，小刀刮喉咙，见她的父母，今年都经历个遍
对于财务自由。这个词相信兄弟们并不陌生，但每个人对财务自由的理解不尽相同。
一些人认为财务自由就是可以买各种奢侈品，不需要去考虑钱不够的事情。另一些人认为财务自由是有非常非常多的钱，但是没有一个清晰的定义，然而我认为的财务自由是我可以不想做什么就可以不做什么。在不影响生活水平的情况下，手上的现金流总是为正的，且被动收入能够大于我的主动收入。然而今年还是没有实现，但是一直在路上
接下来本文分别从以下几个方面来聊一聊，关于我的 2022 年
 工作：团队变动，裁员，年底降薪，拿股权 对于云原生技术方向的思考 生活：健身读书，小刀刮喉咙 买买买：买房买车持续进行中，见她父母 走出去：尝试搞自媒体，尝试微信接入 ChatGPT 未来展望  工作：团队变动，裁员，年底降薪，拿股权 团队变动，裁员 N+1
今年部门内的团队各种大变样，一年下来换了5个小组，一个小组里面的人从快 20 个人到现在变得只剩下 4 个人
一部分是自己走了，一部分直接被裁员拿 N+1。
对拿 N+1 的真的爽歪歪，那一阵子很多人都想被裁员，可是你绩效没有拿 C，没有机会被裁，于是乎，大部分人嘴上说着躺平，喊着摆烂，实际上卷得比以前还狠了一些
然而对于很多优秀的兄弟们，如果自己摆烂的话，自己这一关就过不去，很难办
如上情况都是基于公司开始开源节流，裁掉职级低的，留下职级高的，并且还要更多招大佬进来。
然而招的大佬仍然还是做以前低职级的人干的活。这真的太讽刺了。
不过今年一年对于环境和线上部署这一块，倒是比以前方便了很多。全面容器化，往云原生方向走，真的能够做到一键升级，一键回滚，灰度发布，环境共享，流量染色，大大的提高了开发效率，测试效率和上线效率。
以前主机环境升级最长的时间超过8个小时，现在升级只需要几分钟，这点变化带来的效果还是非常明显的。
拿股权，年底降薪
由于入职以来绩效一直都是比较 ok 的，今年有幸拿到了股权激励，然而本应该是一件开心的事，然而后面发生的事情却不那么妙
今年来一直在不断的降各种福利，降人工成本，已经让大家感受到了一丝丝寒气，然而万万没想到，到了年底，开始玩起了降薪的操作，这让我们彻底感受到寒气逼人，让人心都凉了半截，直呼还不如裁掉我，我想 N+1
另外拿了股权也并没有什么用处，我身边的朋友在某里某讯拿了股权，一些是由于各种原因并没有到行权的时刻就离职了，或者到行权的时刻，股价大跌
自然，如果股权激励是公司百分百授予的那还好，可是如果是还需要自己出一部分钱买入，那确实就不那么 nice 了，我经历的公司中股权激励都是需要自己的出一部分钱的，下次要去一个百分百给股权的坑，这才有动力，哈哈哈
顺便说一下，一般股权分为 3 年行权，第一年行权 40%，第二年行权 30%，第三年行权 30% ，所以如果这家公司发展势头不错，自己也喜欢公司的氛围，且自己在这里仍然可以逐步提升自己的技术和综合能力，那么留下来的几率还是非常大的，然而现实却事与愿违，看来这个股权大概率只是一张没有办法落地的电子签了</description>
    </item>
    
    <item>
      <title>何必卷 AI </title>
      <link>https://qingconglaixueit.github.io/post/hebijuanai/</link>
      <pubDate>Wed, 26 Apr 2023 17:45:19 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/hebijuanai/</guid>
      <description>一天，小明要写一篇论文，但是他遇到了一个问题：他期望有这么一个软件可以智能精准回复，能进行训练，还能帮忙处理数据。于是他开始寻找解决方案。
可以使用最近很火很卷的 chatgpt 呀，于是简单搜索并了解了一下 什么是 chatgpt
什么是 chatgpt Chatgpt 是一种基于自然语言处理技术的智能聊天系统。它可以自动理解用户输入的文本，并作出相应的回应，从而与用户进行实时的对话。
Chatgpt 通常使用机器学习和深度学习算法来训练它的模型，以便更好地理解和响应用户的输入。它还具有自我学习和适应性能力，因此可以根据与用户的交互不断改进和优化其性能。
Chatgpt 已经被广泛应用于各个领域，例如客服、营销、教育等。它可以有效地提高服务质量、节省时间成本，并提高用户满意度。
ChatGPT 于 2022 年 11 月推出，尽管其回答事实的准确性受到批评，但因其详细和清晰的回复而受到关注。
再继续搜索，看到网上的注册和使用教程铺天盖地，自己看的眼花缭乱，小明随机选了一个教程进行学习和尝试，然而跟着教程来发现自己需要达到教程上的效果差距还很明显
例如需要不一样的网络，需要购买 openai 的账号，为了能够更好的服务小明，还要考虑去买更加智能的 chatgpt 4
折腾了一圈，发现自己时间，精力消耗了不少，花了不少钱，然而并没有达到自己期望的结果，那就是期望有软件来帮助自己，解决自己的一些问题，数据处理，资料查找等。
其实我们身边有很多这样的朋友，花了钱，花了精力，自己没有折腾出个所以然，实际上自己的需求其实很简单，就是能够方便的用上 chatgpt 的能力，自己还不用管软件的部署环境，软件的账号是否可以使用的问题
并且我们身边的朋友还遇到了这样的问题，买了账号之后，发现自己使用不规范，自己的账号被封了，没有办法使用调用 api 的方式来享受 chatgpt 的能力
那么是否可以有这样一个软件就像手机里面的 app，或者小程序一样呢？直接在海内的环境中就可以直接简单便捷的去寻找我们期望的答案，如同身边有一个小助手一样，帮我们处理数据，回答我们的问题
对于程序员，可以问他关于编程方面的书籍推荐，进阶路线，实际问题解决方案，代码编写，甚至是代码纠错也是非常 nice 的
对于白领，可以问他关于时间管理，资料整理，人际交往，个人成长 等等问题，他也能像人一样给予你很好的指导
对于学生，你可以问他关于学科资料，解题方案，具体的论点数据等，不用上到某些搜索引擎上搜索半天还看了一堆的广告好太多了
对于宝妈， 自然也是完全 ok 的，你可以了解关于育儿的技巧，关于如何处理好亲密关系，如何引导孩子健康成长
只要你有向外的需求，你就可以使用这个软件，为你提升效率，提升质量，节省出来的时间，你能去做更多有价值有意义的事情
那么他是谁呢？
他就是 Ai 助手</description>
    </item>
    
    <item>
      <title>我的个人微信迅速接入了chatgpt</title>
      <link>https://qingconglaixueit.github.io/post/wodegetrenweixin/</link>
      <pubDate>Wed, 26 Apr 2023 15:24:34 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/wodegetrenweixin/</guid>
      <description>本文主要来聊聊如何快速使用个人微信接入 ChatGPT，欢迎 xdm 尝试起来，仅供学习参考，切莫用于做不正当的事情
关于 ChatGPT 我们每个人都可以简单的使用上，不需要你有很强的技术背景，不需要你有公众号，甚至不需要你自己接入，只要你有一个微信号，就可以享受到 ChatGPT 带给你的惊喜，那么我们开始吧
本文分别从如下几个方面来聊：
 ChatGPT 是什么   个人微信如何快速接入 ChatGPT   关于 ChatGPT 的思考  ChatGPT 是什么 ChatGPT 实际上一个以对话的形式来回答各种问题的模型，他的名字叫做 ChatGPT ，简单理解，他就是一个聊天机器人
现实中，我们印象中的机器人总是那么死板和固执，但是 ChatGPT 却是一个非常人性化的对话模型，他可以和我们聊天，回答我们的各种问题，并且上下文他是可以做到关联的
甚至在未来你在使用各种应用软件的时候，与你对接的客服，或许就是这样的机器人，你可能完全感受不到他居然能够像人一样，甚至比人还聪明，比人还博学
个人微信如何快速接入 ChatGPT 个人微信一样能够轻松的接入 ChatGPT ，不需要你有公众号，只需要做对接的人满足如下资源即可：
 经过实名认证的微信号   Openai 的账号密码   个人电脑或者一台 linux 虚拟机做服务器  与 Chatgpt 对话 首先，关于 openai 的账号如何注册此处就不过多赘述了，网络上的资料还是非常多的，xdm 实际注册的时候注意几点即可</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://qingconglaixueit.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://qingconglaixueit.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.</description>
    </item>
    
  </channel>
</rss>
