<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 阿兵云原生</title>
    <link>https://qingconglaixueit.github.io/post/</link>
    <description>Recent content in Posts on 阿兵云原生</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2022 21:55:47 +0800</lastBuildDate><atom:link href="https://qingconglaixueit.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis中sds数据结构和底层设计原理</title>
      <link>https://qingconglaixueit.github.io/post/redis%E4%B8%ADsds%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%95%E5%B1%82%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 08 Jul 2022 21:55:47 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/redis%E4%B8%ADsds%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%BA%95%E5%B1%82%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86/</guid>
      <description>redis 是 C 语言写的，那么我们思考一下 redis 是如何表示一个字符串的？redis 的数据结构和 C 语言的数据结构是一样的吗？
我们可以看到 redis 源码中的 sds 库函数，和 sds 的具体实现，分别有如下 2 个文件：
sds.h sds.c 具体路径是：deps/hiredis/sds.h , deps/hiredis/sds.c
sds.h 中涉及如下数据结构：
SDS redis 中 SDS simple Dynamic string
简单动态字符串
C 语言中表示字符串的方式是字符数组，例如：
char data[]=&amp;#34;xiaomotong&amp;#34; 如果 C 语言需要扩容的话需要重新分配一个再大一点的内存，存放新的字符串，若每次都要重新分配字符串，对于效率和性能必然会大大降低，并且若某一个字符串是 “xiaomo\0tong”
这个时候，实际上 C 中 遇到 ‘\0’ 就结束了，因此实际 “xiaomo\0tong” 只会读取到xiaomo ,字符串长度就是 6
因此 redis 中的 sds 数据结构是这样设计的，是通过一个成员来标志字符串的长度：
SDS： free:0 len:6 char buf[]=&amp;#34;xiaomo&amp;#34; 若这个时候，我们需要在字符串后面追加字符串， sds 就会进行扩容，例如在后面加上 “tong” ， 那么 sds 的数据结构中的值会变成如下： free:10 len:10 char buf[]=&amp;#34;xiaomotong&amp;#34; 最后的 &amp;quot;xiaomotong&amp;quot; 也是带有\0的，这也保持了 C 语言的标准，redis 中对于 sds 数据结构扩容是成倍增加的，但是到了一定的级别，例如 1M 的时候，就不会翻倍的扩容，而是做加法 例如 1M 变成 2M ， 2M 变成 3M 等等</description>
    </item>
    
    <item>
      <title>2022-07-03 年中简述</title>
      <link>https://qingconglaixueit.github.io/post/hello/</link>
      <pubDate>Fri, 08 Jul 2022 21:40:19 +0800</pubDate>
      
      <guid>https://qingconglaixueit.github.io/post/hello/</guid>
      <description>练习引体向上的少年的2022年中总结 对于年中或者年度总结不知多少小伙伴是自己选择来进行一次总结还是基于其他的原因，无论如何，既然做了，就好好分析一下。
这半年来，我是读书，写作，刷题，做饭，健身，工作样样都干，就是没有干点跳槽的事情， 对于干的每一件事情或多或少都有点自己的想法，那就来吧
先来简单看看目标完成情况 继续云原生方向发力，深耕云原生方向 40% 技术驱动团队，引入新框架 40% 熟悉业内认证领域做法 40% 健身练出 8 块腹肌 50% 想问问这个百分比是如何敲定出来的？ 实际上并没有什么数据支撑，完全是凭感觉，所以接下来制定的下半年的目标会进行调整，需要用数据做支撑，清晰可达成
不过对于健身来说， 8 块腹肌，完成了 50 % ，这个还是有数据支撑的，因为可以看到有 4 块了 😂
过完春节便开始一如往常回到办公地进行打工人的生活，今年或许和往年不太一样
今年换了一个宽大一点的房间，买了室内健身架，本以为自己会持续锻炼一下，可是没想到，还真的就保持了锻炼的习惯😎
微健身 半年进行的健身，从内脏脂肪 7.5 到现在 5.0，从游泳圈到现在差点可以看到腹斜肌 👀
从 2 月 9 日开始，便开始每周三到四次的锻炼，甚至开始早晨起来锻炼 10 分钟，目的是为了唤醒自己的身体，还在门背后记录打卡情况
起初，还能坚持做到每周目标的次数，每次早晨起来就会做关于腹部的简单训练，为什么会是腹部呢？
相信咱们做挨踢的，很多人是瘦瘦的，但是肚子大大滴，不仅影响形象，还影响健康
一次，健身有点猛，做了引体，做了腹肌，还去做有氧操，健身后未注意保暖，导致着凉，体内侵入风寒，接下来的一周，感觉整个人都要死了，毫无生气，每天都拖着沉重的身体，坚持上班🤦‍♂️
好在，这周没有作死😃，当身体疲惫的时候，千万不要锻炼身体，健身，实际上是在伤身，如果身体没有得到充分的休息和营养，那么得不偿失，尤其是这半年，看到一些大厂员工在疲劳的时候去健身出现了各种事故的，心里一咯噔
值得一提的是，这半年我没有刻意练习胸肌，而是在刻意练习引体向上
从刚开始的练习 K1 KEEP 到 现在 K4 ， 有了一个明显的提升。简单来说，刚开始练习引体向上的时候，发现会消耗很多精力在握杠上面，很多人刚开始是握不住单杠的，更别说拉起自己了，那是相当费劲
坚持每周三练，每一次按照 keep 训练的来，关注自身每一次做的动作是否标准，做的动作到哪个节点的时候，开始出现自身力竭，便会关注这些数据，到下一次练习的时候，刻意突破，不过确实有效果
我劝 xdm 不要练习引体向上，因为，练了之后，你的衣服会变小，你的肩膀会变宽，肩部的肌肉会慢慢引起你的注意👀
读书，刷题，做项目 H1 本来是一个不是很忙的阶段，可是万万没想到，在今年连深圳都出现封城的情况，我们的销售还能喜报连连
每接到一个项目之初，同时也得到了一个交付的承诺时间， what？？？ 交付时间完全由销售定？？
所以这半年来基本都是在啃次啃次的设计和落地每一个项目
这也影响了自己在文章方面的输出，基本全是刷题 ， 不过刷题也让我回顾了一些以前写过但并没有完全理解的题和知识点</description>
    </item>
    
  </channel>
</rss>
